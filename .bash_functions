#!/bin/bash
# ~/.bash_functions.professional: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è shell-—Ñ—É–Ω–∫—Ü–∏–π.
# –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ, –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

#   –†–ê–ó–î–ï–õ 1: –°–ò–°–¢–ï–ú–ù–´–ï –ò –°–ï–°–°–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò

# --- –£—Ç–∏–ª–∏—Ç—ã ---

# –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π.
# –ü—Ä–∏–º–µ—Ä: bak /etc/nginx/nginx.conf
bak() {
    if [ -z "$1" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bak <–∏–º—è_—Ñ–∞–π–ª–∞>" >&2
        return 1
    fi
    if [ ! -e "$1" ]; then
        echo "–û—à–∏–±–∫–∞: '$1' –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2
        return 1
    fi
    local timestamp
    timestamp=$(date +%Y-%m-%d_%H-%M-%S)
    echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
    if cp -av "$1" "${1}.bak.${timestamp}"; then
        echo "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${1}.bak.${timestamp}"
    else
        echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏" >&2
        return 1
    fi
}

# –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ "—Ç—è–∂–µ–ª—ã—Ö" —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: dut [–ü–£–¢–¨] [–ì–õ–£–ë–ò–ù–ê] [–ö–û–õ-–í–û_–°–¢–†–û–ö]
# –ü—Ä–∏–º–µ—Ä: dut /var/log 2 10
dut() {
    local path="${1:-.}"
    local depth="${2:-2}"
    local count="${3:-20}"

    if [ ! -d "$path" ]; then
        echo "–û—à–∏–±–∫–∞: '$path' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π" >&2
        return 1
    fi

    echo "üîç –ü–æ–∏—Å–∫ –≤ '$path' –Ω–∞ –≥–ª—É–±–∏–Ω—É '$depth' (—Ç–æ–ø $count):"
    if ! command du -h --max-depth="$depth" "$path" 2>/dev/null | command sort -rh | command head -n "$count"; then
        echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏" >&2
        return 1
    fi
}

# –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –Ω–µ–µ.
# –ü—Ä–∏–º–µ—Ä: mkcd /tmp/new_project
mkcd() {
    if [ -z "$1" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: mkcd <–∏–º—è_–∫–∞—Ç–∞–ª–æ–≥–∞>" >&2
        return 1
    fi
    if mkdir -p -- "$1" && cd -P -- "$1"; then
        echo "–°–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $1"
    else
        echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é" >&2
        return 1
    fi
}

# -- –†–∞–∑–¥–µ–ª 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –∏ –∞—Ä—Ö–∏–≤–∞–º–∏ --

# –ò—â–µ—Ç –§–ê–ô–õ –ø–æ –∏–º–µ–Ω–∏ –≤ —Ç–µ–∫—É—â–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –µ–≥–æ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞—Ö.
# –ü—Ä–∏–º–µ—Ä: ff "*.log"
ff() {
    if [ -z "$1" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ff \"<—à–∞–±–ª–æ–Ω_–∏–º–µ–Ω–∏_—Ñ–∞–π–ª–∞>\"" >&2
        return 1
    fi
    if command_exists "fd"; then
        fd --type f --glob "$1"
    else
        find . -type f -iname "$1"
    fi
}

# –ò—â–µ—Ç –ö–ê–¢–ê–õ–û–ì –ø–æ –∏–º–µ–Ω–∏ –≤ —Ç–µ–∫—É—â–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –µ–≥–æ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞—Ö.
# –ü—Ä–∏–º–µ—Ä: fdd "docs"
fdd() {
    if [ -z "$1" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: fdd \"<—à–∞–±–ª–æ–Ω_–∏–º–µ–Ω–∏_–∫–∞—Ç–∞–ª–æ–≥–∞>\"" >&2
        return 1
    fi
    if command_exists "fd"; then
        fd --type d --glob "$1"
    else
        find . -type d -iname "$1"
    fi
}

# –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É.
# –¢—Ä–µ–±—É–µ—Ç —É—Ç–∏–ª–∏—Ç—ã trash-cli (–Ω–∞–ø—Ä–∏–º–µ—Ä, sudo apt install trash-cli)
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: trash file.txt folder/
trash() {
    if [ $# -eq 0 ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: trash <—Ñ–∞–π–ª1> [—Ñ–∞–π–ª2...]" >&2
        return 1
    fi

    if command_exists "trash-put"; then
        trash-put "$@"
        return $?
    fi
    local trash_dir="$HOME/.Trash"
    if ! mkdir -p "$trash_dir"; then
        echo "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–æ—Ä–∑–∏–Ω—ã '$trash_dir'" >&2
        return 1
    fi

    echo "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: 'trash-put' –Ω–µ –Ω–∞–π–¥–µ–Ω. –§–∞–π–ª—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ '$trash_dir'." >&2
    mv -v "$@" "$trash_dir"
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞—Ä—Ö–∏–≤–æ–≤.
# –ü—Ä–∏–º–µ—Ä: extract archive.zip backup.tar.gz
extract() {
    if [ $# -eq 0 ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: extract <—Ñ–∞–π–ª> [—Ñ–∞–π–ª2]..." >&2
        return 1
    fi
    for file in "$@"; do
        if [ ! -f "$file" ]; then
            echo "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª '$file' –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2
            continue
        fi
        case "$file" in
            *.tar.bz2|*.tbz2) tar xvjf "$file"    ;;
            *.tar.gz|*.tgz)   tar xvzf "$file"    ;;
            *.tar.xz|*.txz)   tar xvJf "$file"    ;;
            *.tar)            tar xvf "$file"     ;;
            *.zip)            unzip "$file"       ;;
            *.rar)            if command_exists "unrar"; then unrar x "$file"; else echo "–û—à–∏–±–∫–∞: 'unrar' –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2; fi ;;
            *.gz)             gunzip "$file"      ;;
            *.bz2)            bunzip2 "$file"     ;;
            *.xz)             unxz "$file"        ;;
            *.7z)             if command_exists "7z"; then 7z x "$file"; else echo "–û—à–∏–±–∫–∞: '7z' –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2; fi ;;
            *)                echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—Ä—Ö–∏–≤–∞: '$file'" >&2 ;;
        esac
    done
}

# –°–æ–∑–¥–∞–µ—Ç .tar.gz –∞—Ä—Ö–∏–≤.
# –ü—Ä–∏–º–µ—Ä: targz my_folder
targz() {
    if [ -z "$1" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: targz <–∏—Å—Ç–æ—á–Ω–∏–∫> [–∞—Ä—Ö–∏–≤.tar.gz]" >&2
        return 1
    fi
    if [ ! -e "$1" ]; then
        echo "–û—à–∏–±–∫–∞: –∏—Å—Ç–æ—á–Ω–∏–∫ '$1' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç." >&2
        return 1
    fi
    local target_name="${1%/}"
    local output_name="${2:-$target_name.tar.gz}"
    echo "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: $output_name"
    tar -czvf "$output_name" "$target_name"
}

# –°–æ–∑–¥–∞–µ—Ç .zip –∞—Ä—Ö–∏–≤ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏.
# –ü—Ä–∏–º–µ—Ä: zipf source_code_folder
zipf() {
    if [ -z "$1" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: zipf <–∏—Å—Ç–æ—á–Ω–∏–∫> [–∞—Ä—Ö–∏–≤.zip]" >&2
        return 1
    fi
    if [ ! -e "$1" ]; then
        echo "–û—à–∏–±–∫–∞: –∏—Å—Ç–æ—á–Ω–∏–∫ '$1' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç." >&2
        return 1
    fi
    local target_name="${1%/}"
    local output_name="${2:-$target_name.zip}"
    echo "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: $output_name"
    zip -r "$output_name" "$target_name" -x "*.git*" "*.DS_Store*" "__MACOSX*"
}
# –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª–∞—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ.
# –ü—Ä–∏–º–µ—Ä: fsearch "error" ./*.log
fsearch() {
    if [ $# -lt 2 ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: fsearch <—Ç–µ–∫—Å—Ç> <—Ñ–∞–π–ª—ã/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏>" >&2
        return 1
    fi
    local text="$1"
    shift
    grep -rnwE -e "$text" "$@"
}
# --- –°–µ—Ç–µ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã ---
# –í—ã–ø–æ–ª–Ω—è–µ—Ç DNS-–∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Google DNS-over-HTTPS.
# –ü—Ä–∏–º–µ—Ä: doh google.com
doh() {
    if ! command_exists "jq"; then
        echo "–û—à–∏–±–∫–∞: 'jq' –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2
        return 1
    fi
    if ! command_exists "curl"; then
        echo "–û—à–∏–±–∫–∞: 'curl' –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2
        return 1
    fi
    if [ -z "$1" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: doh <–¥–æ–º–µ–Ω–Ω–æ–µ_–∏–º—è>" >&2
        return 1
    fi

    if ! curl -s -H 'accept: application/dns+json' "https://dns.google.com/resolve?name=$1" | jq; then
        echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ DNS –∑–∞–ø—Ä–æ—Å–∞" >&2
        return 1
    fi
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
# –ü—Ä–∏–º–µ—Ä: weather London
weather() {
    if ! command_exists "curl"; then
        echo "–û—à–∏–±–∫–∞: 'curl' –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2
        return 1
    fi
    local city="${1:-Moscow}"
    if ! curl -s --connect-timeout 10 "wttr.in/${city}?format=4"; then
        echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ" >&2
        return 1
    fi
}

# "–£–º–Ω–æ–µ" –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ –∏–º–µ–Ω–∏.
# –ü—Ä–∏–º–µ—Ä: killg chrome
killg() {
    if [ -z "$1" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: killg <–∏–º—è_–ø—Ä–æ—Ü–µ—Å—Å–∞>" >&2
        return 1
    fi
    if ! pgrep -fi "$1" > /dev/null; then
        echo "–ü—Ä–æ—Ü–µ—Å—Å—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '$1', –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        return 0
    fi

    echo "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:"
    pgrep -fli "$1"

    read -p "–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã? (y/n): " -r confirm
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        return 0
    fi

    echo "–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã '$1' –æ—Ç –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    if pkill -fi "$1" 2>/dev/null; then
        sleep 2
        if ! pgrep -fi "$1" > /dev/null; then
            echo "–ü—Ä–æ—Ü–µ—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã."
            return 0
        fi
    fi

    read -p "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sudo —Å SIGKILL? (y/n): " -r confirm
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        return 1
    fi

    echo "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∞–º–∏ sudo..."
    if sudo pkill -f -i -9 "$1" 2>/dev/null; then
        sleep 1
        if ! pgrep -fi "$1" > /dev/null; then
            echo "–ü—Ä–æ—Ü–µ—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –ø—Ä–∞–≤–∞–º–∏ sudo."
        else
            echo "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–∞–∂–µ —Å –ø—Ä–∞–≤–∞–º–∏ sudo." >&2
            return 1
        fi
    else
        echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —Å sudo" >&2
        return 1
    fi
}

# –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
# –ü—Ä–∏–º–µ—Ä: cl /var/log
cl() {
    local dir="${1:-$HOME}"
    if [ -d "$dir" ]; then
        if cd "$dir"; then
            ls -F --color=auto 2>/dev/null || ls -F
        else
            echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ '$dir'" >&2
            return 1
        fi
    else
        echo "–û—à–∏–±–∫–∞: –∫–∞—Ç–∞–ª–æ–≥ '$dir' –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2
        return 1
    fi
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
# –ü—Ä–∏–º–µ—Ä: dfh
dfh() {
    if command_exists "pydf"; then
        pydf
    else
        df -Tha --total 2>/dev/null || df -h
    fi
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.
# –ü—Ä–∏–º–µ—Ä: duh /var/www
duh() {
    local target="${1:-.}"
    if [ -e "$target" ]; then
        du -sh "$target"
    else
        echo "–û—à–∏–±–∫–∞: '$target' –Ω–µ –Ω–∞–π–¥–µ–Ω" >&2
        return 1
    fi
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—É—Ç–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é.
# –ü—Ä–∏–º–µ—Ä: dus /var
dus() {
    local target="${1:-.}"
    if [ -d "$target" ]; then
        du -h --max-depth=1 "$target" 2>/dev/null | sort -rh
    else
        echo "–û—à–∏–±–∫–∞: '$target' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π" >&2
        return 1
    fi
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.
# –ü—Ä–∏–º–µ—Ä: h-func
h-func() {
    local source_file="$HOME/.bash_functions"
    if [[ "$SHELL" == *".bash-ssh" ]]; then
        source_file="$SHELL"
    fi

    if [ ! -f "$source_file" ]; then
        echo "–§–∞–π–ª —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $source_file" >&2
        return 1
    fi

    echo -e "\n\e[1;32m–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò (–ø–æ–¥—Å–∫–∞–∑–∫–∞)\e[0m"
    awk '
        /^#/ {
            if (comment1 == "") {
                comment1 = $0;
                sub(/^#\s*/, "", comment1);
            } else {
                comment2 = $0;
                sub(/^#\s*/, "", comment2);
            }
            next;
        }
        /^[a-zA-Z0-9_-]+\(\)/ {
            func_name = $0;
            sub(/\(\).*/, "", func_name);
            print func_name "\t" comment1 "\t" comment2;
            comment1 = "";
            comment2 = "";
        }
        /^$/ {
            comment1 = "";
            comment2 = "";
        }
    ' "$source_file" | \
    sort -f | \
    awk -F'\t' '{
        printf "  \033[1;33m%-18s\033[0m - %s\n", $1, $2;
        if ($3 != "") {
            printf "  %-18s  \033[2m%s\033[0m\n", "", $3;
        }
    }'
    echo ""
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ (aliases) —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º.
# –ü—Ä–∏–º–µ—Ä: h-alias
h-alias() {
    local source_file="$HOME/.bash_aliases"
    if [[ "$SHELL" == *".bash-ssh" ]]; then
        source_file="$SHELL"
    fi

    if [ ! -f "$source_file" ]; then
        echo "–§–∞–π–ª —Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $source_file" >&2
        return 1
    fi

    echo -e "\n\e[1;32m–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ü–°–ï–í–î–û–ù–ò–ú–´ (–ø–æ–¥—Å–∫–∞–∑–∫–∞)\e[0m"
    awk '
        /^# --.*--$/ {
            title = $0;
            sub(/^# -- /, "", title);
            sub(/ --$/, "", title);
            printf "\n\033[1;34m%s\033[0m\n", title;
            next;
        }
        /^\s*alias/ {
            line = $0;
            comment = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è";
            if (match(line, /#.*/)) {
                comment = substr(line, RSTART + 1);
                sub(/^\s*/, "", comment);
                sub(/\s*#.*/, "", line);
            }
            sub(/^\s*alias\s*/, "", line);
            sub(/\s*=.*/, "", line);
            alias_name = line;
            printf "  \033[1;33m%-18s\033[0m - %s\n", alias_name, comment;
        }
    ' "$source_file"
    echo ""
}

# –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ —Å–∏—Å—Ç–µ–º–µ.
# –ü—Ä–∏–º–µ—Ä: sysinfo
sysinfo() {
    echo -e "\n\e[1;32m–û–ü–ï–†–ê–¶–ò–û–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê\e[0m"
    if [ -f /etc/os-release ]; then
        # shellcheck source=/dev/null
        . /etc/os-release
        echo "  –û–°:           ${PRETTY_NAME:-$(uname -s)}"
    else
        echo "  –û–°:           $(uname -s)"
    fi
    echo "  –Ø–¥—Ä–æ:         $(uname -r)"
    echo "  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:  $(uname -m)"

    if command_exists "uptime"; then
        echo "  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $(uptime -p 2>/dev/null | sed "s/up //" || uptime)"
    fi
    echo ""

    echo -e "\e[1;32m–†–ï–°–£–†–°–´\e[0m"
    if command_exists "free"; then
        free -h
    fi
    echo ""

    if command_exists "df"; then
        df -h 2>/dev/null | head -10
    fi
    echo ""

    echo -e "\e[1;32m–ü–†–û–¶–ï–°–°–û–†\e[0m"
    if command_exists "lscpu"; then
        lscpu | grep -E "Model name|CPU\(s\)|Vendor ID|Socket\(s\)" 2>/dev/null
    fi
    echo ""

    echo -e "\e[1;32m–°–ï–¢–¨\e[0m"
    echo "  –ò–º—è —Ö–æ—Å—Ç–∞:    $(hostname)"
    echo "  IP-–∞–¥—Ä–µ—Å–∞:"
    if command_exists "ip"; then
        ip -br a 2>/dev/null | awk '{printf "    %-15s %s\n", $1, $3}'
    elif command_exists "ifconfig"; then
        ifconfig 2>/dev/null | grep "inet " | awk '{print "    " $2}'
    else
        echo "    –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ip –∏–ª–∏ ifconfig)."
    fi
    echo ""
}

# –ü–æ–∫–∞–∑ —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU.
# –ü—Ä–∏–º–µ—Ä: topcpu 5
topcpu() {
    local num="${1:-10}"
    if ! [[ "$num" =~ ^[0-9]+$ ]] || [ "$num" -lt 1 ]; then
        echo "–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º" >&2
        return 1
    fi
    ps aux --sort=-%cpu 2>/dev/null | head -n "$((num + 1))"
}

# -- –†–∞–∑–¥–µ–ª 3: –°–µ—Ç—å –∏ —Å–µ–∞–Ω—Å --

# –í—ã–ø–æ–ª–Ω—è–µ—Ç DNS-–∑–∞–ø—Ä–æ—Å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏ (A, MX, TXT, etc.).
# –ü—Ä–∏–º–µ—Ä: digx google.com MX
digx() {
    if [ -z "$1" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: digx <–¥–æ–º–µ–Ω> [—Ç–∏–ø_–∑–∞–ø–∏—Å–∏]" >&2
        return 1
    fi
    if ! command_exists "dig"; then
        echo "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'dig' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" >&2
        return 1
    fi
    dig +nocmd "$1" "${2:-A}" +noall +answer
}

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ TCP-–ø–æ—Ä—Ç –Ω–∞ —Ö–æ—Å—Ç–µ.
# –ü—Ä–∏–º–µ—Ä: checkport example.com 443
checkport() {
    if [ $# -ne 2 ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: checkport <—Ö–æ—Å—Ç> <–ø–æ—Ä—Ç>" >&2
        return 1
    fi

    local host="$1"
    local port="$2"

    if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        echo "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞" >&2
        return 1
    fi

    if command_exists "nc"; then
        if nc -z -v -w 2 "$host" "$port" 2>/dev/null; then
            echo "–ü–æ—Ä—Ç $port –Ω–∞ $host –æ—Ç–∫—Ä—ã—Ç"
        else
            echo "–ü–æ—Ä—Ç $port –Ω–∞ $host –∑–∞–∫—Ä—ã—Ç"
        fi
    elif command_exists "timeout"; then
        if timeout 2 bash -c "</dev/tcp/$host/$port" 2>/dev/null; then
            echo "–ü–æ—Ä—Ç $port –Ω–∞ $host –æ—Ç–∫—Ä—ã—Ç"
        else
            echo "–ü–æ—Ä—Ç $port –Ω–∞ $host –∑–∞–∫—Ä—ã—Ç"
        fi
    else
        echo "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤ (nc, timeout)" >&2
        return 1
    fi
}

# "–£–º–Ω–∞—è" –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞.
# –ü—Ä–∏–º–µ—Ä: lock
lock() {
    local lock_commands=(
        "xdg-screensaver lock"
        "loginctl lock-session"
        "gnome-screensaver-command -l"
        "xflock4"
        "i3lock"
        "slock"
    )

    for cmd in "${lock_commands[@]}"; do
        local cmd_name="${cmd%% *}"
        if command_exists "$cmd_name"; then
            eval "$cmd"
            return $?
        fi
    done

    echo "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞." >&2
    return 1
}

# -- –†–∞–∑–¥–µ–ª 4: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ --

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ª–æ–≥–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ systemd-—é–Ω–∏—Ç–∞.
# –ü—Ä–∏–º–µ—Ä: jnl-unit nginx.service
jnl-unit() {
    if [ -z "$1" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: jnl-unit <–∏–º—è_—é–Ω–∏—Ç–∞>" >&2
        return 1
    fi
    if ! command_exists "journalctl"; then
        echo "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'journalctl' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" >&2
        return 1
    fi
    sudo journalctl -u "$1" -f --no-pager
}

# –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ, –¥–µ–ª–∞–µ—Ç –∫–æ–º–º–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
# –ü—Ä–∏–º–µ—Ä: gacp "feat: add new login form"
gacp() {
    if [ -z "$1" ]; then
        echo "–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞." >&2
        return 1
    fi
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" >&2
        return 1
    fi
    git add --all && git commit -m "$1" && git push
}

# –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ç–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –≤ origin –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.
# –ü—Ä–∏–º–µ—Ä: gnewbranch feature/PROJ-123
gnewbranch() {
    if [ -z "$1" ]; then
        echo "–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏." >&2
        return 1
    fi
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" >&2
        return 1
    fi
    git checkout -b "$1" && git push -u origin "$1"
}

# –£–¥–∞–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ —Å–ª–∏—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É.
# –ü—Ä–∏–º–µ—Ä: gprune
gprune() {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" >&2
        return 1
    fi

    git fetch --all --prune
    local main_branch
    if git show-ref --verify --quiet refs/heads/main; then
        main_branch="main"
    elif git show-ref --verify --quiet refs/heads/master; then
        main_branch="master"
    else
        echo "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É (main –∏–ª–∏ master)." >&2
        return 1
    fi
    echo "–û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ç–∫–∞: $main_branch. –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–∏—Ç—ã—Ö –≤–µ—Ç–æ–∫..."
    local merged_branches
    merged_branches=$(git branch --merged "$main_branch" | grep -vE "^\*|^\s*$main_branch$")

    if [ -n "$merged_branches" ]; then
        echo "$merged_branches" | xargs -r git branch -d
        echo "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    else
        echo "–ù–µ—Ç –≤–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
    fi
}

# –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker.
# –ü—Ä–∏–º–µ—Ä: dclean
dclean() {
    if ! command_exists "docker"; then
        echo "–û—à–∏–±–∫–∞: 'docker' –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2
        return 1
    fi
    if ! docker info >/dev/null 2>&1; then
        echo "–û—à–∏–±–∫–∞: Docker daemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" >&2
        return 1
    fi

    echo "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker container prune -f
    echo "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤, —Å–µ—Ç–µ–π –∏ –∫—ç—à–∞ —Å–±–æ—Ä–∫–∏..."
    docker system prune -af
}

# –°–æ–∑–¥–∞–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç pip –≤ –Ω–æ–≤–æ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ Python.
# –ü—Ä–∏–º–µ—Ä: mkvenv my-project-env
mkvenv() {
    if [ -z "$1" ]; then
        echo "–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
        return 1
    fi
    if ! command_exists "python3"; then
        echo "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'python3' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" >&2
        return 1
    fi

    python3 -m venv "$1" && \
    source "$1/bin/activate" && \
    pip install -U pip wheel && \
    echo "–û–∫—Ä—É–∂–µ–Ω–∏–µ '$1' —Å–æ–∑–¥–∞–Ω–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ."
}

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.
# –ü—Ä–∏–º–µ—Ä: genpass 16
genpass() {
    local length="${1:-12}"
    if ! [[ "$length" =~ ^[0-9]+$ ]] || [ "$length" -lt 4 ]; then
        echo "–û—à–∏–±–∫–∞: –¥–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –Ω–µ –º–µ–Ω–µ–µ 4" >&2
        return 1
    fi

    if command_exists "openssl"; then
        openssl rand -base64 "$length" | tr -d "=+/" | cut -c1-"$length"
    else
        tr -dc 'A-Za-z0-9!@#$%^&*()_+' < /dev/urandom | head -c "$length"
        echo
    fi
}
# -- –†–∞–∑–¥–µ–ª 5: –£—Ç–∏–ª–∏—Ç—ã --

# –ò—â–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∏–º–µ–Ω–∏, –∏—Å–∫–ª—é—á–∞—è —Å–∞–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞.
# –ü—Ä–∏–º–µ—Ä: psg "nginx|php-fpm"
psg() {
  if [ $# -eq 0 ]; then
      echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: psg <—à–∞–±–ª–æ–Ω_–ø–æ–∏—Å–∫–∞>" >&2
      return 1
  fi
  ps aux | grep -v grep | grep -Ei --color=auto "$@"
}

# –ò—â–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É.
# –ü—Ä–∏–º–µ—Ä: hg "docker ps"
hg() {
    if [ $# -eq 0 ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: hg <—à–∞–±–ª–æ–Ω_–ø–æ–∏—Å–∫–∞>" >&2
        return 1
    fi
    history | grep -E --color=auto "$@"
}

#   clbin - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ clbin.com
#   clbin my_file.txt
#   clbin my_directory/
#
clbin() {
    if ! command_exists "curl"; then
        echo "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'curl' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." >&2
        return 1
    fi
    if [ ! -t 0 ]; then
        curl --progress-bar -F 'clbin=<-' https://clbin.com
        return
    fi
    if [ $# -eq 0 ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <–∫–æ–º–∞–Ω–¥–∞> | clbin" >&2
        echo "       –∏–ª–∏: clbin <—Ñ–∞–π–ª>" >&2
        echo "       –∏–ª–∏: clbin <–∫–∞—Ç–∞–ª–æ–≥>" >&2
        return 1
    fi
    local target="$1"
    if [ ! -e "$target" ]; then
        echo "–û—à–∏–±–∫–∞: '$target' –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2
        return 1
    fi
    if [ -d "$target" ]; then
        if ! command_exists "zip"; then
            echo "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'zip' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞." >&2
            return 1
        fi
        echo "–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ '$target' –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞..." >&2
        zip -r -q - "$target" | curl --progress-bar -F 'clbin=<-' https://clbin.com
    elif [ -f "$target" ]; then
        cat "$target" | curl --progress-bar -F 'clbin=<-' https://clbin.com
    else
        echo "–û—à–∏–±–∫–∞: '$target' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥–æ–º." >&2
        return 1
    fi
}

# –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
# –ü—Ä–∏–º–µ—Ä: ls -l | extract_column 1 9
extract_column() {
    if [ $# -eq 0 ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: extract_column <–Ω–æ–º–µ—Ä–∞_–∫–æ–ª–æ–Ω–æ–∫>" >&2
        echo "–ü—Ä–∏–º–µ—Ä—ã: extract_column 1 3 5" >&2
        echo "        extract_column 2-4" >&2
        echo "        extract_column 3-" >&2
        return 1
    fi

    awk -v cols_str="$*" '
    BEGIN {
        n = split(cols_str, ranges, " ");
        for (i = 1; i <= n; i++) {
            if (ranges[i] ~ /^[0-9]+-[0-9]+$/) {
                split(ranges[i], r, "-");
                for (j = r[1]; j <= r[2]; j++) cols[j] = 1;
            } else if (ranges[i] ~ /^[0-9]+-$/) {
                split(ranges[i], r, "-");
                col_from = r[1];
            } else { cols[ranges[i]] = 1; }
        }
    }
    {
        line = "";
        for (i = 1; i <= NF; i++) {
            if (i in cols || (col_from && i >= col_from)) {
                line = (line == "" ? $i : line " " $i);
            }
        }
        if (line != "") print line;
    }'
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –û–° –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏.
# (–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
setup_os_aliases() {
    if [[ "$(uname)" == "Darwin" ]]; then
        if command_exists "brew"; then
            alias update='brew update && brew upgrade'
            alias install='brew install'
            alias remove='brew uninstall'
            alias search='brew search'
        fi
    elif [ -f /etc/os-release ]; then
       # shellcheck source=/dev/null
       . /etc/os-release
        case "$ID" in
            ubuntu|debian|mint|linuxmint)
                alias update='sudo apt update && sudo apt full-upgrade -y'
                alias install='sudo apt install -y'
                alias remove='sudo apt autoremove --purge -y'
                alias search='apt-cache search'
                ;;
            fedora|centos|rhel|rocky|almalinux)
                if command_exists "dnf"; then
                    alias update='sudo dnf upgrade -y'
                    alias install='sudo dnf install -y'
                    alias remove='sudo dnf remove -y'
                    alias search='dnf search'
                elif command_exists "yum"; then
                    alias update='sudo yum update -y'
                    alias install='sudo yum install -y'
                    alias remove='sudo yum remove -y'
                    alias search='yum search'
                fi
                ;;
            arch|manjaro|endeavouros)
                alias update='sudo pacman -Syu'
                alias install='sudo pacman -S --noconfirm'
                alias remove='sudo pacman -Rns --noconfirm'
                alias search='pacman -Ss'
                ;;
            opensuse*|sles)
                alias update='sudo zypper refresh && sudo zypper update'
                alias install='sudo zypper install'
                alias remove='sudo zypper remove'
                alias search='zypper search'
                ;;
        esac
    fi
}

#   –†–ê–ó–î–ï–õ 6: –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò GIT –° –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú FZF

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –≤–µ—Ç–∫—É Git.
# –ü—Ä–∏–º–µ—Ä: –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∏–º—è –≤–µ—Ç–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter.
gfb() {
    if ! command_exists "fzf"; then
        echo "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'fzf' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." >&2
        return 1
    fi
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" >&2
        return 1
    fi

    local branch
    branch=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)" |
        fzf --preview 'git log --color=always --oneline -n 15 {}' --reverse)
    if [ -n "$branch" ]; then
        git checkout "$branch"
    fi
}

gfl() {
    if ! command_exists "fzf"; then
        echo "–û—à–∏–±–∫–∞: fzf –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2
        return 1
    fi
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" >&2
        return 1
    fi

    git log --graph --color=always \
        --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
    fzf --ansi --no-sort --reverse --tiebreak=index --preview \
        'f() { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git show --color=always $1; }; f {}' \
        --header "ENTER: –ø–æ–ª–Ω—ã–π –∫–æ–º–º–∏—Ç | CTRL-D: –¥–∏—Ñ—Ñ" \
        --bind "enter:execute:echo {} | grep -o '[a-f0-9]\{7\}' | head -1 | xargs -I % sh -c 'git show --color=always % | less -R'" \
        --bind "ctrl-d:execute:echo {} | grep -o '[a-f0-9]\{7\}' | head -1 | xargs -I % sh -c 'git diff --color=always %^ % | less -R'"
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–º–∏—Ç (git add).
# –ü—Ä–∏–º–µ—Ä: –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –∫–ª–∞–≤–∏—à–µ–π Tab –∏ –Ω–∞–∂–º–∏—Ç–µ Enter.
gfa() {
    if ! command_exists "fzf"; then
        echo "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'fzf' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." >&2
        return 1
    fi
    local files
    files=$(git -c color.status=always status --short |
        fzf -m --ansi --nth 2.. --preview 'git diff --color=always -- {-1} | sed "s/.* //"' |
        cut -c 4-)
    if [ -n "$files" ]; then
        echo "$files" | while IFS= read -r file; do
            git add -- "$file"
        done
        git status -sb
    fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ –∏–∑ –ª—é–±–æ–≥–æ –∫–æ–º–º–∏—Ç–∞.
# –ü—Ä–∏–º–µ—Ä: –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–º–∏—Ç, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
gfc() {
    if ! command_exists "fzf"; then echo "–û—à–∏–±–∫–∞: fzf –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2; return 1; fi
    local commit file
    commit=$(git log --oneline --color=always | fzf --ansi --preview 'git show --color=always {+1}' | awk '{print $1}')
    if [ -n "$commit" ]; then
        file=$(git diff-tree --no-commit-id --name-only -r "$commit" | fzf --preview "git show --color=always $commit:{}")
        if [ -n "$file" ]; then
            git checkout "$commit" -- "$file"
        fi
    fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≤–µ—Ç–æ–∫.
# –ü—Ä–∏–º–µ—Ä: –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫–∏ –∫–ª–∞–≤–∏—à–µ–π Tab –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
gfd() {
    if ! command_exists "fzf"; then
        echo "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'fzf' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." >&2
        return 1
    fi
    local branches
    branches=$(git branch | grep -vE '^\*|main|master' | fzf -m --preview 'git log --color=always --oneline -n 10 {}')
    if [ -n "$branches" ]; then
        echo "$branches" | while IFS= read -r branch; do
            git branch -d "$(echo "$branch" | xargs)"
        done
    fi
}

#   –†–ê–ó–î–ï–õ 7: –ü–†–û–ß–ò–ï –£–¢–ò–õ–ò–¢–´

# –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤–≤–µ—Ä—Ö –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤.
# –ü—Ä–∏–º–µ—Ä: up 3
up() {
    local count="${1:-1}"
    if ! [[ "$count" =~ ^[0-9]+$ ]] || [ "$count" -lt 1 ]; then
        echo "–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º" >&2
        return 1
    fi

    local path=""
    for ((i=0; i<count; i++)); do
        path+="../"
    done
    cd "$path" || return 1
}

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π.
# –ü—Ä–∏–º–µ—Ä: calc "10 / 3"
calc() {
    if [ -z "$1" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: calc \"–≤—ã—Ä–∞–∂–µ–Ω–∏–µ\"" >&2
        return 1
    fi
    if ! command_exists "bc"; then
        echo "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'bc' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" >&2
        return 1
    fi
    echo "scale=10; $1" | bc -l | sed -E 's/([.0-9]*[1-9])0+$|\.0+$/\1/'
}

# –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞ –±–µ–∫–∞–ø–∞ –∏ –∑–∞–≥—Ä—É–∑–æ–∫.
# –ü—Ä–∏–º–µ—Ä: backup_home /path/to/backup.tar.gz
backup_home() {
    local output="${1:-$HOME/backup_$(date +%F).tar.gz}"
    echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ $output..."
    tar -czvf "$output" \
        --exclude="$HOME/.cache" \
        --exclude="$HOME/Downloads" \
        --exclude="$HOME/.npm" \
        --exclude="$HOME/.rustup" \
        --exclude="$HOME/.local/share/Trash" \
        --exclude="*/node_modules" \
        --exclude="*/target" \
        --exclude="$output" \
        "$HOME"
    echo "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞."
}

#   –†–ê–ó–î–ï–õ 8: –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ —Å –ø–æ–º–æ—â—å—é —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.
# –ü—Ä–∏–º–µ—Ä: wfile /var/log/syslog tail
wfile() {
    if [ $# -lt 2 ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: wfile <—Ñ–∞–π–ª> <–∫–æ–º–∞–Ω–¥–∞_–¥–ª—è_–∑–∞–ø—É—Å–∫–∞>" >&2
        return 1
    fi
    local file="$1"
    shift
    watch -n 1 -d -- "$@" "$file"
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π rebase –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–º–º–∏—Ç –∏–∑ –ª–æ–≥–∞.
# –ü—Ä–∏–º–µ—Ä: gfr
gfr() {
    if ! command_exists "fzf"; then echo "–û—à–∏–±–∫–∞: fzf –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2; return 1; fi
    local commit
    commit=$(git log --oneline --color=always | fzf --ansi --preview 'git show --color=always {+1}' | awk '{print $1}')
    if [ -n "$commit" ]; then
        git rebase -i "$commit"
    fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω (namespace).
# –ü—Ä–∏–º–µ—Ä: kns (–ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞)
kns() {
    if ! command_exists "fzf"; then echo "–û—à–∏–±–∫–∞: fzf –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2; return 1; fi
    local ns
    ns=$(kubectl get ns -o name | sed 's/namespace\///' | fzf --height 40% --reverse --prompt="–í—ã–±–µ—Ä–∏—Ç–µ Namespace: ")
    if [[ -n "$ns" ]]; then
        kubectl config set-context --current --namespace="$ns"
    fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∫–ª–∞—Å—Ç–µ—Ä).
# –ü—Ä–∏–º–µ—Ä: kctx (–ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞)
kctx() {
    if ! command_exists "fzf"; then echo "–û—à–∏–±–∫–∞: fzf –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2; return 1; fi
    local ctx
    ctx=$(kubectl config get-contexts -o name | fzf --height 40% --reverse --prompt="–í—ã–±–µ—Ä–∏—Ç–µ –ö–æ–Ω—Ç–µ–∫—Å—Ç: ")
    if [[ -n "$ctx" ]]; then
        kubectl config use-context "$ctx"
    fi
}

# –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç Kubernetes –∏–∑ Base64.
# –ü—Ä–∏–º–µ—Ä: kdecode my-secret db-password
kdecode() {
    if [ $# -lt 1 ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: kdecode <–∏–º—è_—Å–µ–∫—Ä–µ—Ç–∞> [–∫–ª—é—á]" >&2
        return 1
    fi
    local secret_name="$1"
    local key="$2"
    if [ -n "$key" ]; then
        kubectl get secret "$secret_name" -o "jsonpath={.data.$key}" | base64 --decode
        echo
    else
        kubectl get secret "$secret_name" -o json | jq -r '.data | to_entries[] | "\(.key): \(.value | @base64d)"'
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ–º–µ–Ω–∞: –∫–µ–º –≤—ã–¥–∞–Ω, –∫–æ–º—É –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è.
# –ü—Ä–∏–º–µ—Ä: check_ssl google.com
check_ssl() {
    local domain="${1}"
    if [ -z "$domain" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: check_ssl <–¥–æ–º–µ–Ω>" >&2
        return 1
    fi
    if ! command_exists "openssl"; then
        echo "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'openssl' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" >&2
        return 1
    fi

    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è ${domain}..."
    echo | openssl s_client -servername "${domain}" -connect "${domain}:443" 2>/dev/null | \
    openssl x509 -noout -text | grep -E "Issuer:|Subject:|Not Before|Not After"
}

# –ë—ã—Å—Ç—Ä–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω JWT (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è API –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏).
# –ü—Ä–∏–º–µ—Ä: jwtdec <–¥–ª–∏–Ω–Ω—ã–π_—Ç–æ–∫–µ–Ω_jwt>
jwtdec() {
    if [ -z "$1" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: jwtdec <—Ç–æ–∫–µ–Ω>" >&2
        return 1
    fi
    local jq_cmd="cat"
    if command_exists "jq"; then
        jq_cmd="jq ."
    fi
    {
        echo -e "\n\033[1;34m--- HEADER ---\033[0m"
        echo "$1" | cut -d'.' -f1 | base64 --decode 2>/dev/null | $jq_cmd
        echo -e "\n\033[1;34m--- PAYLOAD ---\033[0m"
        echo "$1" | cut -d'.' -f2 | base64 --decode 2>/dev/null | $jq_cmd
        echo
    }
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ "–∑–∞–ø—Ä—ã–≥–Ω—É—Ç—å" –≤ —Ä–∞–±–æ—Ç–∞—é—â–∏–π Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.
# –ü—Ä–∏–º–µ—Ä: d_dive (–ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞)
d_dive() {
    if ! command_exists "docker" || ! command_exists "fzf"; then
        echo "–û—à–∏–±–∫–∞: –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è 'docker' –∏ 'fzf'." >&2
        return 1
    fi
    if ! docker info >/dev/null 2>&1; then
        echo "–û—à–∏–±–∫–∞: Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω." >&2
        return 1
    fi
    local container
    container_list=$(docker ps --format "{{.ID}}\t{{.Names}}\t{{.Image}}")
    if [[ -z "$container_list" ]]; then
        echo "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞." >&2
        return 0
    fi
    container=$(echo "$container_list" | fzf --height 40% --reverse --header "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:")
    if [[ -n "$container" ]]; then
        local container_id
        container_id=$(echo "$container" | awk '{print $1}')
        echo "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É $container_id..."
        docker exec -it "$container_id" bash || docker exec -it "$container_id" sh
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–ª–µ–∂–µ–Ω–∏—è (follow).
# –ü—Ä–∏–º–µ—Ä: dlogs (–≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä), dlogs -f (–≤—ã–±—Ä–∞—Ç—å –∏ —Å–ª–µ–¥–∏—Ç—å)
dlogs() {
    if ! command_exists "docker" || ! command_exists "fzf"; then
        echo "–û—à–∏–±–∫–∞: –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è 'docker' –∏ 'fzf'." >&2
        return 1
    fi
    if ! docker info >/dev/null 2>&1; then
        echo "–û—à–∏–±–∫–∞: Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω." >&2
        return 1
    fi
    local container
    container_list=$(docker ps -a --format "{{.ID}}\t{{.Names}}\t{{.Image}}")
    if [[ -z "$container_list" ]]; then
        echo "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞." >&2
        return 0
    fi
    container=$(echo "$container_list" | fzf --height 40% --reverse --header "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:")
    if [[ -n "$container" ]]; then
        local container_id
        container_id=$(echo "$container" | awk '{print $1}')
        docker logs "$@" "$container_id"
    fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π Terraform workspace.
# –¢—Ä–µ–±—É–µ—Ç: terraform, fzf
# –ü—Ä–∏–º–µ—Ä: tfswitch (–ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞)
tfswitch() {
    if ! command_exists "terraform" || ! command_exists "fzf"; then
        echo "–û—à–∏–±–∫–∞: –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è 'terraform' –∏ 'fzf'." >&2
        return 1
    fi
    if [ ! -d ".terraform" ]; then
        echo "–û—à–∏–±–∫–∞: –ö–∞—Ç–∞–ª–æ–≥ .terraform –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'terraform init' —Å–Ω–∞—á–∞–ª–∞." >&2
        return 1
    fi
    local workspace
    workspace=$(terraform workspace list | sed 's/^[ *]*//' | fzf --height 20% --reverse --prompt="–í—ã–±–µ—Ä–∏—Ç–µ workspace: ")
    if [[ -n "$workspace" ]]; then
        terraform workspace select "$workspace"
    fi
}

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–∫ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º (upstream) —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º.
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω remote —Å –∏–º–µ–Ω–µ–º 'upstream'.
# –ü—Ä–∏–º–µ—Ä: gsync
gsync() {
    if ! git remote -v | grep -q "^upstream"; then
        echo "–û—à–∏–±–∫–∞: remote —Å –∏–º–µ–Ω–µ–º 'upstream' –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2
        echo "–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ: git remote add upstream <URL_–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ_—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è>"
        return 1
    fi
    local current_branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    local main_branch="main"
    echo "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ç–∫—É '${main_branch}'..."
    git checkout "$main_branch"
    echo "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ 'upstream'..."
    git fetch upstream
    echo "–°–ª–∏—è–Ω–∏–µ 'upstream/${main_branch}' –≤ –ª–æ–∫–∞–ª—å–Ω—É—é '${main_branch}'..."
    git merge "upstream/${main_branch}"
    echo "–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –≤–µ—Ç–∫—É '${current_branch}'..."
    git checkout "$current_branch"
    echo "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å 'git rebase ${main_branch}' –≤ –≤–∞—à–∏—Ö feature-–≤–µ—Ç–∫–∞—Ö."
}

# –°–æ–∑–¥–∞—Ç—å –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL, –≤—ã–±–∏—Ä–∞—è –µ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ.
# –¢—Ä–µ–±—É–µ—Ç: pg_dump, psql, fzf
# –ü—Ä–∏–º–µ—Ä: pg_backup
# –ü—Ä–∏–º–µ—Ä —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: pg_backup myuser
pg_backup() {
    if ! command_exists "fzf" || ! command_exists "psql"; then
        echo "–û—à–∏–±–∫–∞: –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è 'fzf' –∏ 'psql'." >&2
        return 1
    fi
    local db_user="${1:-postgres}"
    local db_list
    db_list=$(psql -l -t -U "$db_user" 2>/dev/null | cut -d'|' -f1 | sed 's/ //g' | grep -vE '^(template[01]|postgres)$' | grep -v '^$')
    if [ -z "$db_list" ]; then
        echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑ –¥–ª—è –±—ç–∫–∞–ø–∞." >&2
        echo "–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: pg_backup my_db_user" >&2
        return 1
    fi
    local db_name
    db_name=$(echo "$db_list" | fzf --height 30% --reverse --prompt="–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ç–∫–∞–ø–∞: ")
    if [ -z "$db_name" ]; then
        echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        return 0
    fi
    local file_name="${db_name}_$(date +%F_%H-%M-%S).sql.gz"
    echo "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã '${db_name}' (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${db_user}) –≤ —Ñ–∞–π–ª '${file_name}'..."
    pg_dump -Fc -Z 9 -U "${db_user}" "${db_name}" > "${file_name}"
    if [ $? -eq 0 ]; then
        echo "–î–∞–º–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${file_name}"
    else
        echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–º–ø–∞." >&2
        rm -f "${file_name}"
    fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ "—É–±–∏—Ç—å" –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
# –¢—Ä–µ–±—É–µ—Ç: fzf
# –ü—Ä–∏–º–µ—Ä: fkill
fkill() {
    if ! command_exists "fzf"; then echo "–û—à–∏–±–∫–∞: fzf –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2; return 1; fi
    local show_all=false
    local use_sudo=false
    for arg in "$@"; do
        case $arg in
            -a|--all) show_all=true ;;
            -s|--sudo) use_sudo=true ;;
        esac
    done
    local ps_command
    if [[ "$show_all" = true || $EUID -eq 0 ]]; then
        ps_command="ps -ef"
    else
        ps_command="ps -f -u $USER"
    fi
    local kill_cmd="kill"
    if [[ "$use_sudo" = true || $EUID -eq 0 ]]; then
        kill_cmd="sudo kill"
    fi
    local selection
    selection=$($ps_command | sed 1d | grep -vE "fkill|fzf" | fzf -m --height 50% --reverse --header="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Tab –¥–ª—è –≤—ã–±–æ—Ä–∞, Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)")
    if [ -z "$selection" ]; then echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."; return 0; fi
    local pids_to_kill
    pids_to_kill=$(echo "$selection" | awk '{print $2}')
    echo "–í—ã–±—Ä–∞–Ω—ã PID:"
    echo "$pids_to_kill" | sed 's/^/  /'
    read -p "–î–µ–π—Å—Ç–≤–∏–µ: (k)ill (SIGTERM), (f)orce-kill (SIGKILL) [k]: " action
    local signal=15
    if [[ "$action" == "f" || "$action" == "F" ]]; then
        signal=9
    fi
    echo "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ ${signal} —Å –ø–æ–º–æ—â—å—é '$kill_cmd'..."
    local all_killed=true
    for pid in $pids_to_kill; do
        if ! $kill_cmd -"${signal}" "$pid" 2>/dev/null; then
            echo "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${pid}." >&2
            all_killed=false
        fi
    done
    if [ "$all_killed" = true ]; then echo "–ö–æ–º–∞–Ω–¥–∞ kill —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º."; fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–∞–º–∏ systemd.
# –¢—Ä–µ–±—É–µ—Ç: fzf, systemctl
# –ü—Ä–∏–º–µ—Ä: svc (–≤—ã–±—Ä–∞—Ç—å —Å–ª—É–∂–±—É, –∑–∞—Ç–µ–º –¥–µ–π—Å—Ç–≤–∏–µ)
svc() {
    if ! command_exists "fzf"; then echo "–û—à–∏–±–∫–∞: fzf –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2; return 1; fi
    local unit
    unit=$(systemctl list-units --all --type=service --no-pager --plain | awk '{print $1}' | sed 1d | fzf --height 50% --reverse --prompt="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É–∂–±—É: ")
    if [ -z "$unit" ]; then echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."; return 0; fi
    read -p "–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è '${unit}': (s)tatus, (r)estart, st(o)p, st(a)rt [s]: " action
    action=${action:-s}
    case "$action" in
        s) sudo systemctl status "$unit" ;;
        r) sudo systemctl restart "$unit" ;;
        o) sudo systemctl stop "$unit" ;;
        a) sudo systemctl start "$unit" ;;
        *) echo "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ." >&2 ;;
    esac
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "—Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–º–∏" –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ (git stash).
# –¢—Ä–µ–±—É–µ—Ç: fzf
# –ü—Ä–∏–º–µ—Ä: gfs (–≤—ã–±—Ä–∞—Ç—å stash, –∑–∞—Ç–µ–º –¥–µ–π—Å—Ç–≤–∏–µ)
gfs() {
    if ! command_exists "fzf"; then echo "–û—à–∏–±–∫–∞: fzf –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2; return 1; fi
    local stash
    stash=$(git stash list | fzf --height 40% --reverse --prompt="–í—ã–±–µ—Ä–∏—Ç–µ stash: " --preview="git show --color=always {1}")
    if [ -z "$stash" ]; then echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."; return 0; fi
    local stash_ref
    stash_ref=$(echo "$stash" | awk -F: '{print $1}')
    read -p "–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è '${stash_ref}': (a)pply, (p)op, (d)rop [a]: " action
    action=${action:-a}
    case "$action" in
        a) git stash apply "$stash_ref" ;;
        p) git stash pop "$stash_ref" ;;
        d) git stash drop "$stash_ref" ;;
        *) echo "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ." >&2 ;;
    esac
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–º–∏—Ç—ã –∏–∑ –¥—Ä—É–≥–æ–π –≤–µ—Ç–∫–∏ –¥–ª—è cherry-pick.
# –¢—Ä–µ–±—É–µ—Ç: fzf
# –ü—Ä–∏–º–µ—Ä: gfc_pick (–≤—ã–±—Ä–∞—Ç—å –≤–µ—Ç–∫—É, –∑–∞—Ç–µ–º –∫–æ–º–º–∏—Ç—ã)
gfc_pick() {
    if ! command_exists "fzf"; then echo "–û—à–∏–±–∫–∞: fzf –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2; return 1; fi
    local target_branch
    target_branch=$(git branch --all | fzf --height 30% --reverse --prompt="–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É-–∏—Å—Ç–æ—á–Ω–∏–∫: ")
    if [ -z "$target_branch" ]; then echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."; return 0; fi
    local commits
    commits=$(git log "$target_branch" --oneline --color=always | fzf -m --height 50% --reverse --ansi --prompt="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–º–∏—Ç—ã –¥–ª—è cherry-pick: " --preview="git show --color=always {+1}")
    if [ -n "$commits" ]; then
        local commit_hashes
        commit_hashes=$(echo "$commits" | awk '{print $1}' | tac)
        echo "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è cherry-pick –¥–ª—è –∫–æ–º–º–∏—Ç–æ–≤:"
        echo "$commit_hashes"
        git cherry-pick $commit_hashes
    fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ö–æ—Å—Ç—É –∏–∑ ~/.ssh/config.
# –¢—Ä–µ–±—É–µ—Ç: fzf
# –ü—Ä–∏–º–µ—Ä: sshm
sshm() {
    if ! command_exists "fzf"; then echo "–û—à–∏–±–∫–∞: fzf –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2; return 1; fi
    local host
    host=$(grep -E "^\s*Host\s+" ~/.ssh/config | grep -v '*' | awk '{print $2}' | fzf --height 30% --reverse --prompt="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Å—Ç SSH: ")
    if [ -n "$host" ]; then
        echo "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${host}..."
        ssh "$host"
    fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é ripgrep –∏ fzf.
# –¢—Ä–µ–±—É–µ—Ç: fzf, ripgrep (rg), bat (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# –ü—Ä–∏–º–µ—Ä: frg "MyApi.Component"
frg() {
    if [ -z "$1" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: frg <–ø–∞—Ç—Ç–µ—Ä–Ω_–ø–æ–∏—Å–∫–∞>" >&2
        return 1
    fi
    if ! command_exists "rg"; then
        echo "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'ripgrep (rg)' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." >&2
        return 1
    fi
    if ! command_exists "fzf"; then
        echo "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'fzf' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." >&2
        return 1
    fi

    local preview_cmd="cat {1}"
    if command_exists "bat"; then
        preview_cmd="bat --color=always --highlight-line {2} {1}"
    fi
    local file_line
    file_line=$(rg --color=always --line-number --no-heading "$1" |
      fzf --ansi \
          --delimiter ':' \
          --preview-window 'up,60%,border-bottom' \
          --preview "$preview_cmd")
    if [ -n "$file_line" ]; then
        local file_to_open; file_to_open=$(echo "$file_line" | cut -d: -f1)
        local line_to_jump; line_to_jump=$(echo "$file_line" | cut -d: -f2)
        ${EDITOR:-nano} +"$line_to_jump" "$file_to_open"
    fi
}

# –ù–∞–π—Ç–∏ –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ TODO, FIXME, NOTE –≤ –ø—Ä–æ–µ–∫—Ç–µ.
# –¢—Ä–µ–±—É–µ—Ç: fzf, ripgrep (rg)
# –ü—Ä–∏–º–µ—Ä: ftodo
ftodo() {
    if ! command_exists "rg"; then
        echo "–û—à–∏–±–∫–∞: ripgrep (rg) –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2
        return 1
    fi
    if ! command_exists "fzf"; then
        echo "–û—à–∏–±–∫–∞: fzf –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2
        return 1
    fi

    local preview_cmd="cat {1}"
    if command_exists "bat"; then
        preview_cmd="bat --color=always --highlight-line {2} {1}"
    fi
    rg --line-number --no-heading --color=always -e "(TODO|FIXME|NOTE|HACK):" |
      fzf --ansi \
          --delimiter ':' \
          --preview "$preview_cmd" \
          --preview-window 'up,60%,border-bottom'
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Pull Request –∏–∑ GitHub.
# –¢—Ä–µ–±—É–µ—Ç: fzf, gh (GitHub CLI)
# –ü—Ä–∏–º–µ—Ä: fpr
fpr() {
    if ! command_exists "gh"; then echo "–û—à–∏–±–∫–∞: GitHub CLI (gh) –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2; return 1; fi
    local pr
    pr=$(gh pr list | fzf --height 40% --reverse --header="–í—ã–±–µ—Ä–∏—Ç–µ Pull Request:")
    if [[ -n "$pr" ]]; then
        local pr_number
        pr_number=$(echo "$pr" | awk '{print $1}')
        gh pr checkout "$pr_number"
    fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã.
# –¢—Ä–µ–±—É–µ—Ç: fzf, ss (–∏–∑ iproute2)
# –ü—Ä–∏–º–µ—Ä: fports
fports() {
    if ! command_exists "fzf"; then echo "–û—à–∏–±–∫–∞: fzf –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2; return 1; fi
    local port_info
    port_info=$(sudo ss -tulanp | fzf --height 50% --reverse --header="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:")
    if [[ -n "$port_info" ]]; then
        local pid
        pid=$(echo "$port_info" | grep -oP 'pid=\K\d+' | head -n 1)
        if [[ -n "$pid" ]]; then
            echo -e "\n\033[1;34m--- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ (PID: ${pid}) ---\033[0m"
            ps -o user,pid,ppid,%cpu,%mem,start,etime,cmd -p "$pid"
            read -p "–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å? (y/n): " confirm
            if [[ $confirm == [yY] ]]; then
                sudo kill -9 "$pid"
                echo "–ü—Ä–æ—Ü–µ—Å—Å ${pid} –∑–∞–≤–µ—Ä—à–µ–Ω."
            fi
        else
            echo "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å PID –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."
        fi
    fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥.
# –¢—Ä–µ–±—É–µ—Ç: fzf, –∏ find –∏–ª–∏ fd
# –ü—Ä–∏–º–µ—Ä: fcd
fcd() {
    if ! command_exists "fzf"; then
        echo "–û—à–∏–±–∫–∞: fzf –Ω–µ –Ω–∞–π–¥–µ–Ω." >&2
        return 1
    fi
    local dir
    if command_exists "fd"; then
        dir=$(fd --type d --hidden --no-ignore . | fzf --height 50% --reverse --prompt="–ü–µ—Ä–µ–π—Ç–∏ –≤: ")
    else
        dir=$(find . -mindepth 1 -type d 2>/dev/null | sed 's|^\./||' | fzf --height 50% --reverse --prompt="–ü–µ—Ä–µ–π—Ç–∏ –≤: ")
    fi
    if [[ -n "$dir" ]]; then
        if [[ -d "$dir" && -r "$dir" ]]; then
            cd -- "$dir" || return 1
        else
            echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–π—Ç–∏ –≤ '$dir'." >&2
            return 1
        fi
    fi
}

#   –†–ê–ó–î–ï–õ 9: –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ö–†–£–ñ–ï–ù–ò–ï–ú
# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º Bash.
# –ü—Ä–∏–º–µ—Ä: my-bash show aliases
my-bash() {
    local command="$1"
    local component="$2"
    case "$command" in
        show) _my_bash_show "$component" ;;
        help) _my_bash_help "$component" ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: my-bash <–∫–æ–º–∞–Ω–¥–∞> [–∫–æ–º–ø–æ–Ω–µ–Ω—Ç]"
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  show   - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (aliases, completions, functions)."
            echo "  help   - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É."
            return 1
            ;;
    esac
}

_my_bash_show() {
    case "$1" in
        aliases)
            echo -e "\n\e[1;32m–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã (aliases)\e[0m"
            echo "–§–∞–π–ª: ~/.bash_aliases"
            echo "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \`h-alias\` –∏–ª–∏ \`my-bash help aliases\`"
            ;;
        completions)
            echo -e "\n\e[1;32m–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (completions)\e[0m"
            if [ -f ~/.bash_completions ]; then
                echo "–§–∞–π–ª: ~/.bash_completions"
                echo "–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"
                grep -E '^\s*source' ~/.bash_completions | sed 's/source //' | awk -F'/' '{print "  - " $NF}'
            else
                echo "–§–∞–π–ª ~/.bash_completions –Ω–µ –Ω–∞–π–¥–µ–Ω."
            fi
            ;;
        functions)
            echo -e "\n\e[1;32m–§—É–Ω–∫—Ü–∏–∏ (functions)\e[0m"
            echo "–§–∞–π–ª: ~/.bash_functions"
            echo "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \`h-func\` –∏–ª–∏ \`my-bash help functions\`"
            ;;
        *)
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: aliases, completions, functions"
            ;;
    esac
}

_my_bash_help() {
    case "$1" in
        aliases) h-alias ;;
        functions) h-func ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: my-bash help <–∫–æ–º–ø–æ–Ω–µ–Ω—Ç>"
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏: aliases, functions"
            ;;
    esac
}

#   –†–ê–ó–î–ï–õ 10: –ü–õ–ê–ì–ò–ù–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ï–†–°–ò–Ø–ú–ò
# --- –ü–ª–∞–≥–∏–Ω –¥–ª—è pyenv ---
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç pyenv –∏ –≤–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π.
load_pyenv_plugin() {
    if command_exists "pyenv"; then
        export PYENV_ROOT="${PYENV_ROOT:-$HOME/.pyenv}"
        if [[ -d "$PYENV_ROOT" && ":$PATH:" != *":$PYENV_ROOT/bin:"* ]]; then
            export PATH="$PYENV_ROOT/bin:$PATH"
        fi
        eval "$(pyenv init -)"
        if command_exists "pyenv-virtualenv-init"; then
            eval "$(pyenv virtualenv-init -)"
        fi
    fi
}

# --- –ü–ª–∞–≥–∏–Ω –¥–ª—è rbenv ---
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç rbenv –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.
load_rbenv_plugin() {
    if command_exists "rbenv"; then
        export RBENV_ROOT="${RBENV_ROOT:-$HOME/.rbenv}"
        if [[ -d "$RBENV_ROOT" && ":$PATH:" != *":$RBENV_ROOT/bin:"* ]]; then
            export PATH="$RBENV_ROOT/bin:$PATH"
        fi
        eval "$(rbenv init - bash)"
    fi
}

#   –†–ê–ó–î–ï–õ 11: –£–õ–£–ß–®–ï–ù–ò–ï –ö–û–ú–ê–ù–î–ù–û–ô –°–¢–†–û–ö–ò (PROMPT)
# –°–æ–±–∏—Ä–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PS1.
# –í–∫–ª—é—á–∞–µ—Ç: –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Git, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.
prompt_info() {
    # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã.
    local last_exit_code=$?

    local exit_code="\[${Green}\]‚úî\[${Reset}\]"
    if [ "$last_exit_code" -ne 0 ]; then
        exit_code="\[${Red}\]‚úò\[${Reset}\]"
    fi

    local git_info=""
    if command_exists "git" && git rev-parse --is-inside-work-tree &>/dev/null; then
        local branch
        branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
        local dirty=""
        if ! git diff --quiet --ignore-submodules HEAD 2>/dev/null; then
            dirty=" \[${Red}\]*\[${Reset}\]"
        fi
        git_info=" \[${Magenta}\](git:\[${Cyan}\]${branch}${dirty}\[${Magenta}\])\[${Reset}\]"
    fi

    local jobs_info=""
    local job_count
    job_count=$(jobs -p 2>/dev/null | wc -l)
    if [ "$job_count" -gt 0 ]; then
        jobs_info=" \[${Yellow}\](jobs: ${job_count})\[${Reset}\]"
    fi

    echo -e "${exit_code}${git_info}${jobs_info} "
}


#   –†–ê–ó–î–ï–õ 12: –ü–û–ò–°–ö –ü–û –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º, –≥—Ä—É–ø–ø–∏—Ä—É—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
bsearch() {
    local term="$1"
    if [ -z "$term" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bsearch <–ø–æ–∏—Å–∫–æ–≤—ã–π_–∑–∞–ø—Ä–æ—Å>"
        echo "–ò—â–µ—Ç –ø–æ —Ñ–∞–π–ª–∞–º: .bash_aliases, .bash_functions, .bash_completions, .bash_export"
        return 1
    fi
    declare -A search_locations
    search_locations=(
        ["–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã (aliases)"]="$HOME/.bash_aliases"
        ["–§—É–Ω–∫—Ü–∏–∏ (functions)"]="$HOME/.bash_functions"
        ["–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (completions)"]="$HOME/.bash_completions"
        ["–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (exports)"]="$HOME/.bash_export"
    )

    echo -e "\nüîç \e[1m–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è \"${term}\":\e[0m\n"
    local found_in_any=false
    for component_name in "–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã (aliases)" "–§—É–Ω–∫—Ü–∏–∏ (functions)" "–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (completions)" "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (exports)"; do
        local file_path="${search_locations[$component_name]}"
        if [ -f "$file_path" ]; then
            if grep -q -i "$term" "$file_path"; then
                found_in_any=true
                echo -e "‚úÖ \e[1;32m–ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤: ${component_name}\e[0m"
                echo -e "   \e[2m(–§–∞–π–ª: ${file_path})\e[0m"
                grep --color=always -i -n "$term" "$file_path" | sed 's/^/     /'
                echo ""
            fi
        fi
    done
    if [ "$found_in_any" = false ]; then
        echo "‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    fi
}

#   –†–ê–ó–î–ï–õ 13: –ò–ó–ú–ï–†–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î
# --- –ú–µ—Ö–∞–Ω–∏–∑–º preexec ---
preexec() {
    [ -n "$COMP_LINE" ] && return
    [ "$BASH_COMMAND" = "$PROMPT_COMMAND" ] && return
    local preexec_function
    for preexec_function in "${preexec_functions[@]}"; do
        "$preexec_function"
    done
}

precmd() {
    local precmd_function
    for precmd_function in "${precmd_functions[@]}"; do
        "$precmd_function"
    done
}

preexec_functions+=(bash_it_command_duration_start)
precmd_functions+=(bash_it_command_duration_stop)
trap 'preexec' DEBUG

export BASH_IT_CMD_DURATION_THRESHOLD=5
bash_it_command_duration_start() {
    __bash_it_command_start_time=$(date +%s.%N)
}

bash_it_command_duration_stop() {
    local end_time
    end_time=$(date +%s.%N)
    local start_time=${__bash_it_command_start_time:-0}
    local duration
    duration=$(echo "$end_time - $start_time" | bc -l)
    if (( $(echo "$duration > $BASH_IT_CMD_DURATION_THRESHOLD" | bc -l) )); then
        local formatted_duration
        formatted_duration=$(echo "scale=2; $duration / 1" | bc -l)
        echo -e "\n\e[90m(–≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ ${formatted_duration}s)\e[0m"
    fi
}

#   –†–ê–ó–î–ï–õ 14: SUDO –ü–õ–ê–ì–ò–ù
# –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É —Å sudo –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ Esc
sudo-command-line() {
    [[ -z "$READLINE_LINE" ]] && READLINE_LINE="$(history -p '!!' 2>/dev/null)"
    if [[ "$READLINE_LINE" != sudo* ]]; then
        READLINE_LINE="sudo $READLINE_LINE"
        READLINE_POINT=${#READLINE_LINE}
    fi
}

bind -x '"\e\e": sudo-command-line'
